#
# old_revision [25e27ca0f73c4714d17fcdf83d0e4ce7e63bc55d]
#
# patch "libpurple/account.c"
#  from [247775131c335af3e7aa0ab787867b5b51b4d4f9]
#    to [ae53cffc83c41733e00e3f83a06ff805528e14bf]
# 
# patch "libpurple/account.h"
#  from [c58af3eec1c7ad35377ffe5bd10428ac67e30af7]
#    to [4e4ad63d98bf05fd039feb9d51b7c7f3807d7bf7]
# 
# patch "libpurple/request.c"
#  from [e86343376dc7ccb6922a25824ebdf02897f82bde]
#    to [f669fe50bbb4b9a84453fe4bcc67e6d01253497b]
# 
# patch "pidgin/gtkaccount.c"
#  from [44b6593e16b37472245bce7903eef3a6b119f33c]
#    to [4090fba7d1731784205744f71a9af1f611a9b0a0]
# 
# patch "pidgin/gtkmain.c"
#  from [140792542def9e5785974c7f40a47c413c8ac038]
#    to [7291fa44e37a52107c8c7d41ac10fad56084c530]
# 
# patch "pidgin/gtkprefs.c"
#  from [8809e6b4d86c5a2d7b5d4242747b3c536a53a078]
#    to [89e71817264187e2bc4970aaff0029d91701aeb3]
#
============================================================
--- libpurple/account.c	247775131c335af3e7aa0ab787867b5b51b4d4f9
+++ libpurple/account.c	ae53cffc83c41733e00e3f83a06ff805528e14bf
@@ -88,6 +88,19 @@ static void set_current_error(PurpleAcco
 static void set_current_error(PurpleAccount *account,
 	PurpleConnectionErrorInfo *new_err);
 
+
+static void
+purple_account_encrypt_password_if_set(PurpleAccount *account);
+static char *
+purple_account_decrypt_password_if_set(const PurpleAccount *account);
+static void
+purple_accounts_read_encryption_key_if_set();
+
+
+static void *request_key_handle;
+static int request_key_cancel_flag;
+static char *purple_accounts_key;
+
 /*********************************************************************
  * Writing to disk                                                   *
  *********************************************************************/
@@ -374,6 +387,8 @@ account_to_xmlnode(PurpleAccount *accoun
 	if (purple_account_get_remember_password(account) &&
 		((tmp = purple_account_get_password(account)) != NULL))
 	{
+		/* FIXME: I suck *** balls */
+		tmp = account->password;
 		child = xmlnode_new_child(node, "password");
 		xmlnode_insert_data(child, tmp, -1);
 	}
@@ -1054,9 +1069,11 @@ request_password_ok_cb(PurpleAccount *ac
 {
 	const char *entry;
 	gboolean remember;
+	gboolean encrypt;
 
 	entry = purple_request_fields_get_string(fields, "password");
 	remember = purple_request_fields_get_bool(fields, "remember");
+	encrypt = purple_request_fields_get_bool(fields, "encrypt");
 
 	if (!entry || !*entry)
 	{
@@ -1067,6 +1084,9 @@ request_password_ok_cb(PurpleAccount *ac
 	if(remember)
 		purple_account_set_remember_password(account, TRUE);
 
+	if(encrypt)
+		purple_account_set_encrypt_password(account, TRUE);
+
 	purple_account_set_password(account, entry);
 
 	purple_connection_new(account, FALSE, entry);
@@ -1109,6 +1129,9 @@ purple_account_request_password(PurpleAc
 	field = purple_request_field_bool_new("remember", _("Save password"), FALSE);
 	purple_request_field_group_add_field(group, field);
 
+	field = purple_request_field_bool_new("encrypt", _("Encrypt password"), FALSE);
+	purple_request_field_group_add_field(group, field);
+
 	purple_request_fields(account,
                         NULL,
                         primary,
@@ -1493,10 +1516,12 @@ purple_account_set_password(PurpleAccoun
 purple_account_set_password(PurpleAccount *account, const char *password)
 {
 	g_return_if_fail(account != NULL);
-
+	
 	g_free(account->password);
 	account->password = g_strdup(password);
 
+	purple_account_encrypt_password_if_set(account);
+
 	schedule_accounts_save();
 }
 
@@ -1577,6 +1602,8 @@ purple_account_set_remember_password(Pur
 	schedule_accounts_save();
 }
 
+
+
 void
 purple_account_set_check_mail(PurpleAccount *account, gboolean value)
 {
@@ -1891,8 +1918,8 @@ purple_account_get_password(const Purple
 purple_account_get_password(const PurpleAccount *account)
 {
 	g_return_val_if_fail(account != NULL, NULL);
-
-	return account->password;
+	
+	return purple_account_decrypt_password_if_set(account);
 }
 
 const char *
@@ -1954,6 +1981,8 @@ purple_account_get_remember_password(con
 	return account->remember_pass;
 }
 
+
+
 gboolean
 purple_account_get_check_mail(const PurpleAccount *account)
 {
@@ -2672,7 +2701,239 @@ purple_accounts_get_handle(void)
 	return &handle;
 }
 
+/*
+ * Returns TRUE if encrypt-password is checked
+ */
+gboolean
+purple_account_get_encrypt_password(const PurpleAccount *account)
+{
+	g_return_val_if_fail(account != NULL, FALSE);
+	
+	return purple_account_get_bool(account, "encrypt-password", FALSE);
+}
+
+/*
+ * Sets encrypt-password to TRUE or FALSE
+ */
 void
+purple_account_set_encrypt_password(PurpleAccount *account, gboolean value)
+{
+	g_return_if_fail(account != NULL);
+
+	//account->encrypt_pass = value;
+	purple_account_set_bool(account, "encrypt-password", value);
+
+	schedule_accounts_save();
+}
+
+/*
+ * Storing encryption key in memory
+ */
+void
+purple_accounts_set_encryption_key(const char *key)
+{
+	printf("In function (%s) key (%s)\n", __func__, key);
+
+	g_return_if_fail(key != NULL);
+
+	if(purple_accounts_key)
+		g_free(purple_accounts_key);
+
+	purple_accounts_key = g_strdup(key);
+
+	schedule_accounts_save();
+}
+
+/*
+ * The encryption/decryption routine
+ */
+void
+purple_accounts_do_encrypt_string(const char *in, 
+						size_t inlen,
+						char **out,
+						size_t *outlen,
+						const char *key)
+{
+	char *p;
+
+	p = purple_base64_encode(in, inlen);
+
+	g_return_if_fail(out != NULL);
+	g_return_if_fail(outlen != NULL);
+
+	*out = p;
+	*outlen = strlen(p);
+}
+
+void 
+purple_accounts_do_decrypt_string(const char *in,
+						size_t inlen,
+						char **out,
+						size_t *outlen,
+						const char *key)
+{
+	char *p;
+	size_t s;
+
+	p = purple_base64_decode(in, &s);
+
+	g_return_if_fail(out != NULL);
+	g_return_if_fail(outlen != NULL);
+
+	*out = p;
+	*outlen = s;
+}
+
+/*
+ * In the following functions we check weather password encryption is enabled
+ * for the specific account.
+ *
+ * Logic: Global Password encryption is enable and
+ * 		 Encryption key is set and
+ * 		 The account has encrypt_pass set
+ */
+
+static gboolean
+purple_account_encryption_is_set(const PurpleAccount *account)
+{
+	gboolean gb1;
+	gboolean gb2;
+	gboolean gb3;
+
+	printf("In function (%s)\n", __func__);
+	gb1 = purple_prefs_get_bool("/purple/encryption/enable");
+	gb2 = (purple_accounts_key != NULL);
+	gb3 = purple_account_get_encrypt_password(account);
+
+	return (gb1 && gb2 && gb3);
+}
+
+/*
+ * Encrypt the password and store inside account
+ */
+static void
+purple_account_encrypt_password_if_set(PurpleAccount *account)
+{
+	char *p;
+	size_t s;
+
+	purple_accounts_read_encryption_key_if_set();
+	printf("In function (%s) account->password (%s)\n", __func__, account->password);
+	g_return_if_fail((account && account->password));
+
+	if(!purple_account_encryption_is_set(account))
+		return;
+
+	purple_accounts_do_encrypt_string(
+		account->password,
+		strlen(account->password),
+		&p,
+		&s,
+		NULL);
+
+	if(account->password)
+		g_free(account->password);
+
+	account->password = p;
+
+	schedule_accounts_save();
+	
+	printf("Encrypted password (%s)\n", account->password);
+}
+
+/*
+ * Read the encrypted password from account and return the decrypted password
+ * without changing anything in account
+ */
+static char *
+purple_account_decrypt_password_if_set(const PurpleAccount *account)
+{
+	char *p;
+	size_t s;
+	
+	purple_accounts_read_encryption_key_if_set();
+	printf("In function (%s) account->password (%s)\n", __func__, account->password);
+	g_return_val_if_fail((account && account->password), NULL);
+
+	if(!purple_account_encryption_is_set(account))
+		return account->password;
+
+	purple_accounts_do_decrypt_string(
+		account->password,
+		strlen(account->password),
+		&p,
+		&s,
+		NULL);
+
+	printf("Decrypted password (%s)\n", p);
+	return p;	/* FIXME: Possible memory leak */
+}
+
+/*
+ * Implement the dialog box to read encryption key from user if set
+ */
+static void
+encrypt_ok_cb(PurpleAccount *account, PurpleRequestFields *fields)
+{
+	char *encryption_key;
+
+	encryption_key = purple_request_fields_get_string(fields, "encrypt-key");
+	purple_accounts_set_encryption_key(encryption_key);
+
+	//g_free(encryption_key);
+}
+
+static void
+encrypt_cancel_cb(PurpleAccount *account, PurpleRequestFields *fields)
+{
+	request_key_cancel_flag = 1;
+
+	return;
+}
+
+static void
+purple_accounts_read_encryption_key_if_set()
+{
+	PurpleRequestFieldGroup *group;
+	PurpleRequestFields *fields;
+	PurpleRequestField *field;
+	gchar *primary;
+	
+	printf("BOOO\n");
+	if(!purple_prefs_get_bool("/purple/encryption/enable"))
+		return;
+
+	if(purple_accounts_key)
+		return;
+	
+	printf("BOOO\n");
+	primary = g_strdup_printf(_("Enter encryption key"));
+
+	fields = purple_request_fields_new();
+	group = purple_request_field_group_new(NULL);
+	purple_request_fields_add_group(fields, group);
+
+	field = purple_request_field_string_new("encrypt-key", _("Enter Encryption Key"), NULL, FALSE);
+	purple_request_field_string_set_masked(field, TRUE);
+	purple_request_field_set_required(field, TRUE);
+	purple_request_field_group_add_field(group, field);
+	
+	request_key_handle = purple_request_fields(NULL,
+								NULL,
+								primary,
+								NULL, 
+								fields,
+								_("OK"), encrypt_ok_cb,
+								_("Cancel"), encrypt_cancel_cb,
+								NULL, NULL, NULL,
+								NULL);
+
+	
+	printf("request_key_handle: %p\n", request_key_handle);
+	g_free(primary);
+}
+
+void
 purple_accounts_init(void)
 {
 	void *handle = purple_accounts_get_handle();
@@ -2760,8 +3021,14 @@ purple_accounts_init(void)
 	purple_signal_connect(conn_handle, "connection-error", handle,
 	                      PURPLE_CALLBACK(connection_error_cb), NULL);
 
-	load_accounts();
+	purple_prefs_add_none("/purple/encryption");
+	purple_prefs_add_bool("/purple/encryption/enable", FALSE);
+	purple_prefs_add_string("/purple/encryption/key", "");
+	//purple_prefs_add_string("/purple/encryption/check_plain", "PIDGIN");
+	//if(!purple_prefs_get_string("/purple/encryption/check_crypted"))
+	//	purple_prefs_add_string("/purple/encryption/check_crypted", "");
 
+	load_accounts();
 }
 
 void
============================================================
--- libpurple/account.h	c58af3eec1c7ad35377ffe5bd10428ac67e30af7
+++ libpurple/account.h	4e4ad63d98bf05fd039feb9d51b7c7f3807d7bf7
@@ -119,6 +119,7 @@ struct _PurpleAccount
 	char *buddy_icon_path;      /**< The buddy icon's non-cached path.      */
 
 	gboolean remember_pass;     /**< Remember the password.                 */
+	gboolean encrypt_pass;		 /**< Encrypt the password if globally enabled */
 
 	char *protocol_id;          /**< The ID of the protocol.                */
 
@@ -379,6 +380,14 @@ void purple_account_set_remember_passwor
 void purple_account_set_remember_password(PurpleAccount *account, gboolean value);
 
 /**
+ * Sets wheather or not this account should encrypt its password.
+ *
+ * @param account The account.
+ * @param value   @c TRUE if it should be encrypted.
+ */
+void purple_account_set_encrypt_password(PurpleAccount *account, gboolean value);
+
+/**
  * Sets whether or not this account should check for mail.
  *
  * @param account The account.
@@ -621,6 +630,15 @@ gboolean purple_account_get_remember_pas
 gboolean purple_account_get_remember_password(const PurpleAccount *account);
 
 /**
+ * Returns weather or not this account should encrypt its password.
+ *
+ * @param account The account.
+ *
+ * @return @c TRUE if it should encrypt the password.
+ */
+gboolean purple_account_get_encrypt_password(const PurpleAccount *account);
+
+/**
  * Returns whether or not this account should check for mail.
  *
  * @param account The account.
@@ -992,6 +1010,11 @@ void purple_accounts_restore_current_sta
  */
 void purple_accounts_restore_current_statuses(void);
 
+/*
+ * This is called to store the encryption key in memory
+ */
+void purple_accounts_set_encryption_key(const char *key);
+
 /*@}*/
 
 
============================================================
--- libpurple/request.c	e86343376dc7ccb6922a25824ebdf02897f82bde
+++ libpurple/request.c	f669fe50bbb4b9a84453fe4bcc67e6d01253497b
@@ -1317,7 +1317,7 @@ purple_request_fields(void *handle, cons
 
 		return info->ui_handle;
 	}
-
+	
 	return NULL;
 }
 
============================================================
--- pidgin/gtkaccount.c	44b6593e16b37472245bce7903eef3a6b119f33c
+++ pidgin/gtkaccount.c	4090fba7d1731784205744f71a9af1f611a9b0a0
@@ -112,6 +112,7 @@ typedef struct
 	GtkWidget *password_entry;
 	GtkWidget *alias_entry;
 	GtkWidget *remember_pass_check;
+	GtkWidget *encrypt_pass_check;
 
 	/* User Options */
 	GtkWidget *user_frame;
@@ -559,6 +560,15 @@ add_login_options(AccountPrefsDialog *di
 					   FALSE, FALSE, 0);
 	gtk_widget_show(dialog->remember_pass_check);
 
+	/* Encrypt Password */
+	dialog->encrypt_pass_check =
+		gtk_check_button_new_with_mnemonic(_("_Encrypt password"));
+	gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(dialog->encrypt_pass_check),
+								FALSE);
+	gtk_box_pack_start(GTK_BOX(vbox), dialog->encrypt_pass_check,
+	                  	FALSE, FALSE, 0);
+	gtk_widget_show(dialog->encrypt_pass_check);
+
 	/* Set the fields. */
 	if (dialog->account != NULL) {
 		if (purple_account_get_password(dialog->account))
@@ -568,6 +578,11 @@ add_login_options(AccountPrefsDialog *di
 		gtk_toggle_button_set_active(
 				GTK_TOGGLE_BUTTON(dialog->remember_pass_check),
 				purple_account_get_remember_password(dialog->account));
+
+		gtk_toggle_button_set_active(
+				GTK_TOGGLE_BUTTON(dialog->encrypt_pass_check),
+				purple_account_get_encrypt_password(dialog->account));
+				
 	}
 
 	if (dialog->prpl_info != NULL &&
@@ -575,6 +590,7 @@ add_login_options(AccountPrefsDialog *di
 
 		gtk_widget_hide(dialog->password_box);
 		gtk_widget_hide(dialog->remember_pass_check);
+		gtk_widget_hide(dialog->encrypt_pass_check);
 	}
 
 	/* Do not let the user change the protocol/screenname while connected. */
@@ -1295,6 +1311,11 @@ ok_account_prefs_cb(GtkWidget *w, Accoun
 			gtk_toggle_button_get_active(
 					GTK_TOGGLE_BUTTON(dialog->remember_pass_check)));
 
+	/* Encrypt Password */
+	purple_account_set_encrypt_password(account,
+			gtk_toggle_button_get_active(
+					GTK_TOGGLE_BUTTON(dialog->encrypt_pass_check)));
+
 	/* Check Mail */
 	if (dialog->prpl_info && dialog->prpl_info->options & OPT_PROTO_MAIL_CHECK)
 		purple_account_set_check_mail(account,
============================================================
--- pidgin/gtkmain.c	140792542def9e5785974c7f40a47c413c8ac038
+++ pidgin/gtkmain.c	7291fa44e37a52107c8c7d41ac10fad56084c530
@@ -884,7 +884,9 @@ int main(int argc, char *argv[])
 #ifdef _WIN32
 	winpidgin_post_init();
 #endif
-
+	
+	/* TODO: Remove this */
+	//purple_accounts_set_encryption_key("TEST");
 	gtk_main();
 
 #ifdef HAVE_SIGNAL_H
============================================================
--- pidgin/gtkprefs.c	8809e6b4d86c5a2d7b5d4242747b3c536a53a078
+++ pidgin/gtkprefs.c	89e71817264187e2bc4970aaff0029d91701aeb3
@@ -1190,7 +1190,96 @@ browser_button_clicked_cb(GtkWidget *but
 	g_error_free(err);
 }
 
+static void encryption_key_changed(GtkEntry *entry, gpointer data)
+{
+	char *key;
+
+	key = gtk_entry_get_text(entry);
+
+	/*
+	 * save some dummy data which indicates a password is set
+	 */
+	if(strlen(key)) {
+		purple_prefs_set_string("/purple/encryption/key", "AAAAAAA");
+		purple_accounts_set_encryption_key(key);
+	}
+	else {
+		purple_prefs_set_string("/purple/encryption/key", "");
+	}
+
+	/*
+	 * purple_account_set_encryption_key(key);
+	 */
+}
+
 static GtkWidget *
+security_page(void)
+{
+	GtkWidget *ret;
+	GtkWidget *vbox, *hbox, *entry;
+	GtkWidget *table, *label, *enable_enc_checkbox;
+	GtkSizeGroup *sg;
+
+	ret = gtk_vbox_new(FALSE, PIDGIN_HIG_CAT_SPACE);
+	gtk_container_set_border_width(GTK_CONTAINER(ret), PIDGIN_HIG_BORDER);
+
+	vbox = pidgin_make_frame(ret, _("Security Options"));
+	sg = gtk_size_group_new(GTK_SIZE_GROUP_HORIZONTAL);
+	
+	enable_enc_checkbox = pidgin_prefs_checkbox(_("_Enable Account Password Encryption"),
+	         "/purple/encryption/enable", vbox);
+	
+	table = gtk_table_new(2, 2, FALSE);
+   gtk_container_set_border_width(GTK_CONTAINER(table), 0);
+   gtk_table_set_col_spacings(GTK_TABLE(table), 5);
+   gtk_table_set_row_spacings(GTK_TABLE(table), 10);
+   gtk_container_add(GTK_CONTAINER(vbox), table);
+
+   label = gtk_label_new_with_mnemonic(_("Encryption _Key:"));
+   gtk_misc_set_alignment(GTK_MISC(label), 0.0, 0.5);
+   gtk_table_attach(GTK_TABLE(table), label, 0, 1, 0, 1, GTK_FILL, 0, 0, 0);
+   gtk_size_group_add_widget(sg, label);
+
+   entry = gtk_entry_new();
+	gtk_entry_set_visibility(entry, FALSE);
+	if (gtk_entry_get_invisible_char(GTK_ENTRY(entry)) == '*')
+		gtk_entry_set_invisible_char(GTK_ENTRY(entry), PIDGIN_INVISIBLE_CHAR);
+
+   gtk_label_set_mnemonic_widget(GTK_LABEL(label), entry);
+   gtk_table_attach(GTK_TABLE(table), entry, 1, 2, 0, 1, GTK_FILL, 0, 0, 0);
+   g_signal_connect(G_OBJECT(entry), "focus-out-event",
+					G_CALLBACK(encryption_key_changed), NULL);
+
+	pidgin_set_accessible_label(entry, label);
+
+/*
+	hbox = gtk_hbox_new(FALSE, PIDGIN_HIG_BOX_SPACE);
+   gtk_container_add(GTK_CONTAINER(vbox), hbox);
+
+	label = gtk_label_new(NULL);
+	gtk_label_set_markup(GTK_LABEL(label),
+			_("<span style=\"italic\">The key to use for encryption/decryption</span>"));
+   gtk_misc_set_alignment(GTK_MISC(label), 0.0, 0.5);
+   gtk_container_add(GTK_CONTAINER(hbox), label);
+*/
+
+	if(!purple_prefs_get_bool("/purple/encryption/enable")) {
+		gtk_widget_set_sensitive(GTK_WIDGET(table), FALSE);
+	}
+	else {
+		gtk_entry_set_text(entry, purple_prefs_get_string("/purple/encryption/key"));
+	}
+	
+	g_signal_connect(G_OBJECT(enable_enc_checkbox), "clicked",
+					G_CALLBACK(pidgin_toggle_sensitive), table);
+
+	g_object_unref(sg);
+	gtk_widget_show_all(ret);
+
+	return ret;
+}
+
+static GtkWidget *
 network_page(void)
 {
 	GtkWidget *ret;
@@ -2168,6 +2257,7 @@ static void prefs_notebook_init(void) {
 	prefs_notebook_add_page(_("Smiley Themes"), theme_page(), notebook_page++);
 	prefs_notebook_add_page(_("Sounds"), sound_page(), notebook_page++);
 	prefs_notebook_add_page(_("Network"), network_page(), notebook_page++);
+	prefs_notebook_add_page(_("Security"), security_page(), notebook_page++);
 #ifndef _WIN32
 	/* We use the registered default browser in windows */
 	/* if the user is running gnome 2.x or Mac OS X, hide the browsers tab */
